using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Gluten.Core.DataProcessing.Helper
{
    /// <summary>
    /// Provides some helper function to filter junk generated by AI
    /// </summary>
    public static class AiDataFilterHelper
    {
        private static readonly List<string> _addressFilters = [
            "( exact location not specified)",
            "(no address ",
            "(no street ",
            "( in the text, but a  is given: ",
            "(No specific ",
            "(shop url not available, only address ",
            "(no street ",
            "<no address provided ",
            "(no street address",
            "(No address provided",
            "(Frozen food section ",
            "(factory location ",
            "(unspecified",
            "(multiple locations",
            "(not ",
            "()",
            "(null)",
            "(Centre location)",
            "(street ",
            "(address ",
            "( in the given",
            "(closed",
            "(unknown,",
            "(location within",
            "(website link:",
            "<No specific address ",
            "<No street ",
            "<No address",
            "<unspecified",
            "<address not provided ",
            "<Not provided ",
            "<insert ",
            "<insert ",
            "<unknown>",
            "<not provided>",
            "<address>",
            "no specific address provided",
            "no specific location provided in the given text.",
            "Not specified",
            "Google Maps link",
            "I do not have a specific",
            "CBD location",
            "http://",
            "https:",
            "Google Maps address:",
            "not provided",
            "Address not provided in given text",
            "no address found in the snippet, only a google search result link",
            "unknown (located",
            "Available on Uber eats",
            "not explicitly stated in the text,",
            "no specific ",
            "no address ",
            "no explicit ",
            "No street ",
            "unspecified",
            "Various locations ",
            "unknown",
            "Easy to search on Google",
            "n/a (food truck)",
            "I apologize,",
            "www.",
            "facebook.com",
            "N/A"
];

        private static readonly List<string> _nameFilters = [
            "Groceries",
            "Train Station",
            "Tokyo Station",
            "Supermarket",
            "Unknown Restaurant",
            "Tokyo shops",
            "Google Drive",
            "Christmas Cafe",
            "<insert place name>",
            "Domino’s",
            "GFTs",
            "Aomi",
            "Find Me Gluten Free",
            "Their website",
            "Sheraton",
            "Disney hotels",
            "Universal Studios",
            "Gate Building",
            "Volcano",
            "mochi place",
            "sumo wrestling",
            "Kyoto Tower GF treats store",
            "Backup restaurant name",
            "Conveyor belt sushi place",
            "GF pizza place",
            "Other sushi restaurant",
            "Gluten Free Bangkok",
            "The place with no name",
            "Food Court",
            "Gluten-free restaurant"
             ];


        public static string? FilterAddress(string? address)
        {
            if (address == null) return null;
            foreach (var filter in _addressFilters)
            {
                if (address.StartsWith(filter, StringComparison.InvariantCultureIgnoreCase))
                {
                    return "";
                }
                //address = address.ToLower().Replace(filter.ToLower(), "");
            }
            return address.Trim();
        }

        public static bool IsInPlaceNameSkipList(string? placeName)
        {
            if (placeName == null) return false;
            foreach (var nameFilter in _nameFilters)
            {
                if (placeName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase))
                {
                    return true;
                }
            }
            return false;
        }

    }
}
