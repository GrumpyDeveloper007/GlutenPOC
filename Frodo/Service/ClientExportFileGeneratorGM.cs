using Gluten.Core.DataProcessing.Service;
using Gluten.Core.LocationProcessing.Service;
using Gluten.Data.ClientModel;
using Gluten.Data.MapsModel;
using Gluten.Data.TopicModel;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json;
using Gluten.Data.Access.Service;
using Gluten.Data.Access.DatabaseModel;
using Gluten.Core.Helper;
using Gluten.Core.Interface;


namespace Frodo.Service
{
    /// <summary>
    /// Generates and exports data to the client database
    /// </summary>
    internal class ClientExportFileGeneratorGM(DatabaseLoaderService _databaseLoaderService,
        GeoService _geoService,
        CloudDataStore _dataStore,
        IConsole Console
        )
    {
        /// <summary>
        /// Group data by pin (venue), export to json
        /// </summary>
        public void GenerateTopicExport(List<DetailedTopic> topics, List<PinTopic> pins, string exportFolder)
        {
            var gmPins = _databaseLoaderService.LoadGMPins();

            GenerateGMPinExport(pins);
            var gmPinsWithDescriptions = gmPins.Where(x => !string.IsNullOrWhiteSpace(x.Comment) && x.Comment.Contains("gluten", StringComparison.InvariantCultureIgnoreCase)).ToList();
            WriteToDatabase(gmPinsWithDescriptions);
            CreateExportFolderDataGM(gmPins, exportFolder);
        }

        private void GenerateGMPinExport(List<PinTopic> pins)
        {
            var gmPins = _databaseLoaderService.LoadGMPins();
            List<GMapsPin> exportPins = [];

            foreach (var pin in gmPins)
            {
                if (!string.IsNullOrWhiteSpace(pin.Comment)
                    && pin.GeoLatitude != null
                    && pin.GeoLongitude != null
                    && !PinHelper.IsInList(pins, double.Parse(pin.GeoLatitude), double.Parse(pin.GeoLongitude)))
                {
                    pin.Description = $"Pin generated from Google maps - {pin.Comment}";
                    exportPins.Add(pin);
                }
            }

            _databaseLoaderService.SaveGMMapPinExport(exportPins);
            Console.WriteLine($"Exported {exportPins.Count} pins generated by google maps ");
        }

        private static void SaveDb<typeToSave>(string fileName, typeToSave topics)
        {

            var json = JsonConvert.SerializeObject(topics, Formatting.None,
                [new StringEnumConverter()]);
            File.WriteAllText(fileName, json);
        }

        private void WriteToDatabase(List<GMapsPin> gmPins)
        {
            var mapper = new DbMapper();

            // delete locally removed
            var itemsGm = _dataStore.GetData<GMapsPinDb>("").Result;
            for (int i = 0; i < itemsGm.Count; i++)
            {
                var item = itemsGm[i];
                if (!gmPins.Exists(o => o.GeoLatitude == item.GeoLatitude && o.GeoLongitude == item.GeoLongitude))
                {
                    Console.WriteLine($"Delete item {i}");
                    _dataStore.DeleteItemAsync(item).Wait();
                }
            }

            for (int i = 0; i < gmPins.Count; i++)
            {
                var item = gmPins[i];
                item.Description = $"Pin generated from Google maps - {item.Comment}";
                Console.WriteLine($"Writing to database {i}");
                var dbItem = mapper.Map<GMapsPinDb, GMapsPin>(item);
                dbItem.Country = _geoService.GetCountryPin(item);
                _dataStore.ReplaceItemAsync(dbItem).Wait();
            }
        }

        private void CreateExportFolderDataGM(List<GMapsPin> pins, string exportFolder)
        {
            Dictionary<string, List<GMapsPin>> files = [];

            foreach (var item in pins)
            {
                var pinCountry = _geoService.GetCountryPin(item);

                if (!string.IsNullOrWhiteSpace(pinCountry))
                {
                    if (!files.TryGetValue(pinCountry, out List<GMapsPin>? value))
                    {
                        value = ([]);
                        files.Add(pinCountry, value);
                    }

                    value.Add(item);
                }
            }

            foreach (var file in files)
            {
                SaveDb(exportFolder + file.Key + "GM.json", file.Value);
            }
        }




    }
}
